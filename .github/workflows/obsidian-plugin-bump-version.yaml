name: Bump and release version
on:
  workflow_call:
    inputs:
      PLUGIN_NAME:
        description: "id of your plugin"
        required: true
        type: string
      STYLE:
        description: "If you use a styles.css file, set this to true"
        required: false
        type: boolean
        default: false
      BRANCH:
        description: "Main branch"
        type: string
        required: false
        default: "master"
      BETA:
        description: "If you want to release a beta version, set this to true"
        required: false
        type: boolean
        default: false
      SUBMODULE:
        description: "If your plugin is a submodule, set this to true"
        required: false
        type: boolean
        default: false
      CACHE:
        description: "Cache to use (npm, pnpm, yarn)"
        required: false
        type: string
        default: "npm"
      discord_webhook_avatar:
        description: "Avatar URL for the discord webhook"
        required: false
        type: string
      discord_webhook_name:
        description: "Username for the discord webhook"
        required: false
        type: string
    secrets:
      GH_TOKEN:
        description: "Github token"
        required: true
      AUTHOR_EMAIL:
        description: "Author email"
        required: false
      AUTHOR_NAME:
        description: "Author name"
        required: false
      DISCORD_WEBHOOK:
        description: "Send a message to discord with the changelog using a discord webhook"
        required: false

jobs:
  echo:
    runs-on: ubuntu-latest

    steps:
      - name: Echo
        run: |
          echo "### Inputs" >> $GITHUB_STEP_SUMMARY
          echo "PLUGIN_NAME: ${{ inputs.PLUGIN_NAME }}" >> $GITHUB_STEP_SUMMARY
          echo "STYLE: ${{ inputs.STYLE }}" >> $GITHUB_STEP_SUMMARY
          echo "BRANCH: ${{ inputs.BRANCH }}" >> $GITHUB_STEP_SUMMARY
          echo "BETA: ${{ inputs.BETA }}" >> $GITHUB_STEP_SUMMARY
          echo "SUBMODULE: ${{ inputs.SUBMODULE }}" >> $GITHUB_STEP_SUMMARY
          echo "CACHE: ${{ inputs.CACHE }}" >> $GITHUB_STEP_SUMMARY

  release-latest:
    if: ${{ !inputs.BETA }}
    env:
      SUBMODULE: ${{ inputs.SUBMODULE }}
      VERSION: ""
      CHANGELOG: ""

    runs-on: ubuntu-latest
    steps:
      - name: Verify Inputs for cache
        if: ${{ inputs.CACHE != 'npm' && inputs.CACHE != 'pnpm' && inputs.CACHE != 'yarn' }}
        run: |
          echo "::error::CACHE must be one of npm, pnpm or yarn"
          exit 1
      - name: rename submodule env
        if: ${{ inputs.SUBMODULE}}
        run: |
          echo "SUBMODULE=recursive" >> $GITHUB_ENV
      - name: Configure github
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
      - uses: actions/checkout@v3
        with:
          submodules: ${{ env.SUBMODULE }}
          token: ${{ secrets.GH_TOKEN }}
      - name: Install pnpm
        if: ${{ inputs.CACHE == 'pnpm' }}
        uses: pnpm/action-setup@v3
        with:
          version: 9
      - uses: actions/setup-node@v3
        with:
          node-version: 18
          cache: ${{ inputs.CACHE }}
      - name: Install yarn
        if: ${{ inputs.CACHE == 'yarn' }}
        run: |
          npm install -g yarn
          yarn install
          yarn run bump --ignore-scripts
          yarn run build -- --output-dir ${{ inputs.PLUGIN_NAME }}
      - name: Install dependencies (npm)
        if: ${{ inputs.CACHE == 'npm' }}
        run: |
          npm install
          npm run bump --ignore-scripts
          npm run build -- --output-dir ${{ inputs.PLUGIN_NAME }}
      - name: Install dependencies (pnpm)
        if: ${{ inputs.CACHE == 'pnpm' }}
        run: |
          pnpm install
          pnpm run bump --ignore-scripts
          pnpm run build --output-dir ${{ inputs.PLUGIN_NAME }}
      - name: Get version number
        run: |
          echo "VERSION=$(node -p "require('./package.json').version")" >> $GITHUB_ENV
          echo "### VERSION : ${{ env.VERSION }}" >> $GITHUB_STEP_SUMMARY
          echo ${{ env.VERSION }}

      - name: Zip files
        run: |
          zip -r ${{ inputs.PLUGIN_NAME }}.zip ${{ inputs.PLUGIN_NAME }}
          echo "### Files" >> $GITHUB_STEP_SUMMARY
          ls >> $GITHUB_STEP_SUMMARY
      - name: Create changelog
        id: create-changelog
        run: |
          npx rexreplace "^.*?#+\s\[.*?\n.*?(?=\s*#+\s\[)" "_" -s -M -G -m -o "CHANGELOG.md" > CHANGELOG-LATEST.md
          cat CHANGELOG-LATEST.md >> $GITHUB_STEP_SUMMARY
          echo "CHANGELOG=$(cat CHANGELOG-LATEST.md)" >> $GITHUB_ENV
      - name: Create Release with css
        if: ${{ fromJson(inputs.STYLE) && !env.ACT }}
        uses: softprops/action-gh-release@v1
        env:
          GITHUB_TOKEN: "${{ secrets.GH_TOKEN }}"
          VERSION: "${{ env.VERSION }}"
        with:
          tag_name: "${{ env.VERSION }}"
          name: "${{ env.VERSION }}"
          body_path: CHANGELOG-LATEST.md
          prerelease: false
          draft: false
          token: "${{ secrets.GH_TOKEN }}"
          files: |
            ${{ inputs.PLUGIN_NAME }}.zip
            ${{ inputs.PLUGIN_NAME }}/main.js
            ${{ inputs.PLUGIN_NAME }}/manifest.json
            ${{ inputs.PLUGIN_NAME }}/styles.css
      - name: Create Release without css
        if: ${{ !fromJson(inputs.STYLE) && !env.ACT }}
        uses: softprops/action-gh-release@v1
        env:
          GITHUB_TOKEN: "${{ secrets.GH_TOKEN }}"
          VERSION: "${{ env.VERSION }}"
        with:
          tag_name: "${{ env.VERSION }}"
          name: "${{ env.VERSION }}"
          body_path: CHANGELOG-LATEST.md
          draft: false
          prerelease: false
          token: "${{ secrets.GH_TOKEN }}"
          files: |
            ${{ inputs.PLUGIN_NAME }}.zip
            ${{ inputs.PLUGIN_NAME }}/main.js
            ${{ inputs.PLUGIN_NAME }}/manifest.json
      - name: Push updated changes
        run: git push --follow-tags origin ${{ inputs.BRANCH }}
      - name: Send discord message with changelog
        env:
          DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK || ''}}
        if: ${{ env.DISCORD_WEBHOOK != '' }}
        uses: tsickert/discord-webhook@v5.3.0
        with:
          webhook-url: ${{ secrets.DISCORD_WEBHOOK }}
          username: ${{inputs.discord_webhook_name || 'GitHub Actions'}}
          avatar-url: ${{inputs.discord_webhook_avatar || 'https://github.githubassets.com/images/modules/logos_page/GitHub-Mark.png'}}
          embed-title: "NEW RELEASE: ${{ env.VERSION }}"
          embed-description: |
            ${{ env.CHANGELOG}}
          embed-color: 6130354
  release-beta:
    if: ${{ fromJson(inputs.BETA) }}
    env:
      SUBMODULE: ${{ inputs.SUBMODULE }}
      VERSION: ""
      CHANGELOG: ""
    runs-on: ubuntu-latest
    steps:
      - name: Verify inputs for cache
        if: ${{ inputs.CACHE != 'npm' && inputs.CACHE != 'pnpm' && inputs.CACHE != 'yarn' }}
        run: |
          echo "::error::CACHE must be one of npm, pnpm or yarn"
          exit 1
      - name: rename submodule env
        if: ${{ inputs.SUBMODULE}}
        run: |
          echo "SUBMODULE=recursive" >> $GITHUB_ENV
      - uses: actions/checkout@v3
        with:
          submodules: ${{ env.SUBMODULE }}
          token: ${{ secrets.GH_TOKEN }}
      - name: Install pnpm
        if: ${{ inputs.CACHE == 'pnpm' }}
        uses: pnpm/action-setup@v3
        with:
          version: 9
      - name: Install yarn
        if: ${{ inputs.CACHE == 'yarn' }}
        run: npm install -g yarn
      - uses: actions/setup-node@v3
        with:
          node-version: 18
          cache: ${{ inputs.CACHE }}
      - name: Install dependencies (npm)
        run: npm install
        if: ${{ inputs.CACHE == 'npm' }}
      - name: Install dependencies (pnpm)
        run: pnpm install
        if: ${{ inputs.CACHE == 'pnpm' }}
      - name: Install dependencies (yarn)
        run: yarn install
        if: ${{ inputs.CACHE == 'yarn' }}
      - name: Bump version beta (npm)
        run: |
          npm run bump --ignore-scripts -- --beta
      - name: Bump version beta (pnpm)
        run: |
          pnpm run bump --ignore-scripts -- --beta
      - name: Bump version beta (yarn)
        run: |
          yarn run bump --ignore-scripts -- --beta
      - name: Get version number
        run: |
          echo "VERSION=$(node -p "require('./package.json').version")" >> $GITHUB_ENV
          echo "### VERSION : ${{ env.VERSION }}" >> $GITHUB_STEP_SUMMARY
          echo ${{ env.VERSION }}
      - name: build (npm)
        if: ${{ inputs.CACHE == 'npm' }}
        run: npm run build  -- --output-dir ${{ inputs.PLUGIN_NAME }}
      - name: build (pnpm)
        run: pnpm run build --output-dir ${{ inputs.PLUGIN_NAME }}
        if: ${{ inputs.CACHE == 'pnpm' }}
      - name: build (yarn)
        run: yarn run build  -- --output-dir ${{ inputs.PLUGIN_NAME }}
        if: ${{ inputs.CACHE == 'yarn' }}
      - name: Zip files
        run: |
          zip -r ${{ inputs.PLUGIN_NAME }}.zip ${{ inputs.PLUGIN_NAME }}
          echo "### Files" >> $GITHUB_STEP_SUMMARY
          ls >> $GITHUB_STEP_SUMMARY
      - name: Create changelog
        run: |
          npx rexreplace "^.*?#+\s\[.*?\n.*?(?=\s*#+\s\[)" "_" -s -M -G -m -o "CHANGELOG-beta.md" > CHANGELOG-LATEST.md
          cat CHANGELOG-LATEST.md >> $GITHUB_STEP_SUMMARY
          echo "CHANGELOG=$(cat CHANGELOG-LATEST.md)" >> $GITHUB_ENV
      - name: Create Release with css
        if: ${{ fromJson(inputs.STYLE) && !env.ACT }}
        uses: softprops/action-gh-release@v1
        env:
          GITHUB_TOKEN: "${{ secrets.GH_TOKEN }}"
          VERSION: "${{ env.VERSION }}"
        with:
          tag_name: "${{ env.VERSION }}"
          name: "${{ env.VERSION }}"
          body_path: CHANGELOG-LATEST.md
          draft: false
          prerelease: true
          token: "${{ secrets.GH_TOKEN }}"
          files: |
            ${{ inputs.PLUGIN_NAME }}.zip
            ${{ inputs.PLUGIN_NAME }}/main.js
            ${{ inputs.PLUGIN_NAME }}/manifest.json
            ${{ inputs.PLUGIN_NAME }}/styles.css
      - name: Create Release without css
        if: ${{ !fromJson(inputs.STYLE) && !env.ACT }}
        uses: softprops/action-gh-release@v1
        env:
          GITHUB_TOKEN: "${{ secrets.GH_TOKEN }}"
          VERSION: "${{ env.VERSION }}"
        with:
          tag_name: "${{ env.VERSION }}"
          name: "${{ env.VERSION }}"
          body_path: CHANGELOG-LATEST.md
          draft: false
          prerelease: true
          token: "${{ secrets.GH_TOKEN }}"
          files: |
            ${{ inputs.PLUGIN_NAME }}.zip
            ${{ inputs.PLUGIN_NAME }}/main.js
            ${{ inputs.PLUGIN_NAME }}/manifest.json
      - name: Push updated changes
        if: ${{ !env.ACT }}
        uses: actions-js/push@master
        with:
          github_token: ${{ secrets.GH_TOKEN }}
          branch: ${{ inputs.BRANCH || 'master' }}
          author_name: ${{ secrets.AUTHOR_NAME || 'github-actions[bot]' }}
          author_email: ${{ secrets.AUTHOR_EMAIL || 'github-actions[bot]@users.noreply.github.com' }}
      - name: Send discord message with changelog
        env:
          DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK || ''}}
        if: ${{ env.DISCORD_WEBHOOK != '' }}
        uses: tsickert/discord-webhook@v5.3.0
        with:
          webhook-url: ${{ secrets.DISCORD_WEBHOOK }}
          username: ${{inputs.discord_webhook_name || 'GitHub Actions'}}
          avatar-url: ${{inputs.discord_webhook_avatar || 'https://github.githubassets.com/images/modules/logos_page/GitHub-Mark.png'}}
          embed-title: "[BETA] NEW RELEASE: ${{ env.VERSION }}"
          embed-description: |
            ${{ env.CHANGELOG}}
          embed-color: 6130354
